from config import BOT_TOKEN, SPREADSHEET_ID
import os
import json
import logging
from datetime import datetime
import pytz
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import gspread
from google.oauth2.service_account import Credentials

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ACTIVITY, ENERGY_STATUS = range(2)

# –¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
TAGS = {
    "–†–û–õ–ò": {
        "–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ": ["–ì–µ–Ω–¥–∏—Ä–µ–∫—Ç–æ—Ä", "–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "–ê—Ä—Ç–¥–∏—Ä–µ–∫—Ç–æ—Ä", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–°–∞–º–æ–º–µ–Ω–µ–¥–∂–µ—Ä", "–ü—Ä–æ–¥–∞–∫—Ç"],
        "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ": ["–°—Ç—Ä–∞—Ç–µ–≥", "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", "–ü—Ä–æ–¥–∞–∫—Ç", "–†–µ—Å–µ—Ä—á–µ—Ä", "–î–∏–∑–∞–π–Ω–µ—Ä", "–ü–∏—Å–∞—Ç–µ–ª—å", "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"],
        "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ": ["–£—á–∏—Ç–µ–ª—å", "–¢—Ä–µ–Ω–µ—Ä", "–¢—Ä–µ–∫–µ—Ä", "–£—á–µ–Ω–∏–∫"],
        "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ": ["–î—Ä—É–≥", "–°—ã–Ω", "–ú—É–∂", "–ë–∞–¥–¥–∏", "–ñ–∏–ª–µ—Ç–∫–∞", "–ù–µ—Ç–≤–æ—Ä–∫", "–ß–µ–ª–æ–≤–µ–∫"]
    },
    "–°–ö–ò–õ–´": {
        "‚ö™ –ë–∞–∑–æ–≤—ã–µ": ["–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "–∞–Ω–∞–ª–∏–∑", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è", "–¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è"],
        "üü£ –≠–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã–µ": ["—Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã", "—á–∏–Ω–∏—Ç—å –ª—é–¥–µ–π", "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã"],
        "üü° –≠–Ω–µ—Ä–≥–∏—è": ["–ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å", "–∏–∑–æ–±—Ä–µ—Ç–∞—Ç—å", "–¥—Ä—É–∂–∏—Ç—å", "—É—á–∏—Ç—å"],
        "üü¢ –¶–µ–ª–µ–≤—ã–µ": ["–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", "—Ä–µ–∂–∏—Å—Å—É—Ä–∞", "–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"]
    }
}

def setup_google_sheets():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    credentials_info = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
    credentials = Credentials.from_service_account_info(
        credentials_info,
        scopes=['https://www.googleapis.com/auth/spreadsheets']
    )
    client = gspread.authorize(credentials)
    return client.open_by_key(SPREADSHEET_ID).sheet1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    keyboard = [['–ó–∞–∫–æ–Ω—á–∏—Ç—å']]
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–ª? –û–ø–∏—à–∏ –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n'
        '–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ "–ó–∞–∫–æ–Ω—á–∏—Ç—å".',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    context.user_data['activities'] = []
    return ACTIVITY

def analyze_activity(text: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤."""
    found_tags = {
        "roles": [],
        "skills": [],
    }
    
    text_lower = text.lower()
    
    for category, subcategories in TAGS.items():
        for subcategory, tags in subcategories.items():
            for tag in tags:
                if tag.lower() in text_lower:
                    if category == "–†–û–õ–ò":
                        found_tags["roles"].append(tag)
                    elif category == "–°–ö–ò–õ–´":
                        found_tags["skills"].append(tag)
    
    return found_tags

async def record_activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ —ç–Ω–µ—Ä–≥–∏—é."""
    text = update.message.text
    
    if text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å':
        if not context.user_data.get('activities'):
            await update.message.reply_text(
                "–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è?"
            )
            return ACTIVITY
            
        sheet = setup_google_sheets()
        moscow_tz = pytz.timezone('Europe/Moscow')
        date = datetime.now(moscow_tz).strftime('%Y-%m-%d')
        
        for activity_data in context.user_data['activities']:
            activity_text = activity_data['text']
            energy_status = activity_data['energy']
            tags = activity_data['tags']
            
            sheet.append_row([
                date,
                activity_text,
                energy_status,
                ', '.join(tags['roles']),
                ', '.join(tags['skills'])
            ])
        
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    tags = analyze_activity(text)
    context.user_data['current_activity'] = {
        'text': text,
        'tags': tags
    }
    
    keyboard = [['–î–∞—ë—Ç —ç–Ω–µ—Ä–≥–∏—é ‚ûï', '–ó–∞–±–∏—Ä–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é ‚ûñ']]
    await update.message.reply_text(
        '–≠—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∞—ë—Ç –∏–ª–∏ –∑–∞–±–∏—Ä–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é?',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ENERGY_STATUS

async def record_energy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    energy_status = update.message.text
    current_activity = context.user_data.get('current_activity')
    
    if not current_activity:
        return ConversationHandler.END
    
    current_activity['energy'] = energy_status
    context.user_data['activities'].append(current_activity)
    
    keyboard = [['–ó–∞–∫–æ–Ω—á–∏—Ç—å']]
    await update.message.reply_text(
        '–ó–∞–ø–∏—Å–∞–ª! –ß—Ç–æ –µ—â–µ —Ç—ã –¥–µ–ª–∞–ª?',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ACTIVITY

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    await update.message.reply_text(
        '–û—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ACTIVITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, record_activity)
            ],
            ENERGY_STATUS: [
                MessageHandler(
                    filters.Regex('^(–î–∞—ë—Ç —ç–Ω–µ—Ä–≥–∏—é ‚ûï|–ó–∞–±–∏—Ä–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é ‚ûñ)$'),
                    record_energy
                )
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()